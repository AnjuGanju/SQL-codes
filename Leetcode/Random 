This is a demo task.

Write a function:

def solution(A)

that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

Given A = [1, 2, 3], the function should return 4.

Given A = [−1, −3], the function should return 1.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].
Copyright 2009–2020 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.



# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(A):
    #finding the max in the list A
    sorted_A = sorted(A)
    max_element = sorted_A[-1]
    if max_element > 1:
        to_return = max_element - 1
        while to_return > 0:
            if to_return in sorted_A:
                to_return -= 1
            else:
                return to_return
            return max_element+1
    else:
        return 1
    pass


    def solution(A):
        sorted_A = sorted(A)
        max_element = sorted_A[-1]
        if max_element > 1:
            to_compare = list(range(1, max_element-1, 1))
            if to_compare == sorted_A[:-2]:
                return max_element+1
            else:
                return max_element-1
        else:
            return 1




            def solution(A):
                for k in range(0, len(A)):
                    if A[k] == -1:
                        index_value = A.index(k)
                node_value = A[index_value]
                length_list = A.index(node_value)
                return(length_list)
